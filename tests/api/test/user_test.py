"""
Module Description: This file contains a test suite for API endpoints specifically focused on user management
operations. It utilizes pytest for organizing and executing parametrized tests using synthetic user data generated by
the 'Faker' library.

Functions:
- test_post_user: Sends a POST request to create a user using synthetic data generated by Faker.
- test_get_user_by_username: Sends a GET request to retrieve user data by username using Faker-generated data.
- test_update_user_by_username: Sends a PUT request to update user data by username using Faker-generated data.
- test_delete_user_by_username: Sends a DELETE request to remove a user by username using Faker-generated data.
"""

import pytest
import logging.config
from faker import Faker
import logging

from tests.api.endpoints.user_endpoints import UserEndPoints
from tests.api.payload.user import User

logging.config.fileConfig('logging.conf')
faker = Faker()


@pytest.fixture(scope="module")
def user_payload():
    user = User()
    user.set_id(abs(hash(faker.uuid4())))
    user.set_username(faker.user_name())
    user.set_firstname(faker.first_name())
    user.set_lastname(faker.last_name())
    user.set_email(faker.safe_email())
    user.set_password(faker.password(length=10))
    user.set_phone(faker.phone_number())
    return user


@pytest.fixture(scope="module")
def logger():
    log = logging.getLogger(__name__)
    return log


@pytest.mark.run(order=1)
def test_post_user(logger, user_payload):
    logger.info("Test: Create User")
    response = UserEndPoints.create_user(user_payload)

    assert response.status_code == 200
    response_json = response.json()
    assert int(response_json['message']) == user_payload.get_id()


@pytest.mark.run(order=2)
def test_get_user_by_username(logger, user_payload):
    logger.info("Test: Read User")
    response = UserEndPoints.read_user(user_payload.get_username())

    assert response.status_code == 200
    response_json = response.json()
    assert response_json['username'] == user_payload.get_username()
    assert int(response_json['id']) == user_payload.get_id()


@pytest.mark.run(order=3)
def test_update_user_by_username(logger, user_payload):
    logger.info("Test: Update User")

    user_payload.email = faker.safe_email()
    user_payload.phone = faker.phone_number()
    user_payload.password = faker.password(length=10)

    response = UserEndPoints.update_user(user_payload.get_username(), user_payload)
    assert response.status_code == 200
    response_json = response.json()
    assert int(response_json['message']) == user_payload.get_id()

    # Checking data after update
    response_after_update = UserEndPoints.read_user(user_payload.get_username())
    assert response_after_update.status_code == 200
    response_after_update_json = response_after_update.json()
    assert response_after_update_json['email'] == user_payload.get_email()


@pytest.mark.run(order=4)
def test_delete_user_by_username(logger, user_payload):
    logger.info("Test: Delete User")
    response = UserEndPoints.delete_user(user_payload.get_username())

    assert response.status_code == 200
    response_json = response.json()
    assert response_json['message'] == user_payload.get_username()
